#################################################################
## Weather
#################################################################
- platform: darksky
  api_key: !secret darsky_api_key
  language: de
  monitored_conditions:
    - summary
    - icon
    - nearest_storm_distance
    - precip_type
    - precip_intensity
    - precip_probability
    - precip_intensity_max 
    - temperature
    - wind_speed
    - cloud_cover
    - humidity
    - pressure
    - temperature_max
    - temperature_min
- platform: yr
  forecast: 24
  monitored_conditions:
    - temperature
    - symbol
    - precipitation
    - windSpeed
    - pressure
    - windDirection
    - humidity
    - fog
    - cloudiness
    - lowClouds
    - mediumClouds
    - highClouds
    - dewpointTemperature
- platform: openweathermap
  api_key: !secret openweathermap_api_key
  monitored_conditions:
    - weather
    - temperature
    - wind_speed
    - wind_bearing
    - humidity
    - pressure
    - clouds
    - rain
    - snow
- platform: dwd_weather_warnings
  region_name: !secret dwd_weather_warnings_region
#################################################################
## Room Presence
#################################################################
#########User one
- platform: mqtt
  name: mqtt_room_user_one
  state_topic: !secret room_user_one_state_topic
  value_template: '{{ value_json.guesses[0].location }}'
#Rename sensor in frontend
- platform: template
  sensors:
    room_user_one:
      friendly_name: !secret user_one_name
      value_template: >-
        {% if is_state('sensor.mqtt_room_user_one', 'livingroom') %}
          Wohnzimmer
        {% elif is_state('sensor.mqtt_room_user_one', 'kitchen') %}
          Küche
        {% elif is_state('sensor.mqtt_room_user_one', 'studyroom') %}
          Arbeitszimmer
        {% elif is_state('sensor.mqtt_room_user_one', 'bedroom') %}
          Schlafzimmer
        {% elif is_state('sensor.mqtt_room_user_one', 'lower_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_one', 'lowe_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_one', 'upper_bathroom') %}
          Bad oben
        {% elif is_state('sensor.mqtt_room_user_one', 'upper_balcony') %}
          Balkon Oben
        {% elif is_state('sensor.mqtt_room_user_one', 'guest_room') %}
          Gästezimmer
        {% else %}
          Unbekannt
        {% endif %}
      entity_id:
        - sensor.mqtt_room_user_one
#########User two
- platform: mqtt
  name: mqtt_room_user_two
  state_topic: !secret room_user_two_state_topic
  value_template: '{{ value_json.guesses[0].location }}'
#Rename sensor in frontend
- platform: template
  sensors:
    room_user_two:
      friendly_name: !secret user_two_name
      value_template: >-
        {% if is_state('sensor.mqtt_room_user_two', 'livingroom') %}
          Wohnzimmer
        {% elif is_state('sensor.mqtt_room_user_two', 'kitchen') %}
          Küche
        {% elif is_state('sensor.mqtt_room_user_two', 'studyroom') %}
          Arbeitszimmer
        {% elif is_state('sensor.mqtt_room_user_two', 'bedroom') %}
          Schlafzimmer
        {% elif is_state('sensor.mqtt_room_user_two', 'lower_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_two', 'lowe_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_two', 'upper_bathroom') %}
          Bad oben
        {% elif is_state('sensor.mqtt_room_user_two', 'upper_balcony') %}
          Balkon Oben
        {% elif is_state('sensor.mqtt_room_user_two', 'guest_room') %}
          Gästezimmer
        {% else %}
          Unbekannt
        {% endif %}
      entity_id:
       - sensor.mqtt_room_user_two
#########S8Plus
- platform: mqtt
  name: mqtt_room_galaxys8
  state_topic: eifinger/location/galaxys8
  value_template: '{{ value_json.guesses[0].location }}'
#Rename sensor in frontend
- platform: template
  sensors:
    room_s8plus:
      friendly_name: S8-Plus
      value_template: >-
        {% if is_state('sensor.mqtt_room_galaxys8', 'livingroom') %}
          Wohnzimmer
        {% elif is_state('sensor.mqtt_room_galaxys8', 'kitchen') %}
          Küche
        {% elif is_state('sensor.mqtt_room_galaxys8', 'studyroom') %}
          Arbeitszimmer
        {% elif is_state('sensor.mqtt_room_galaxys8', 'bedroom') %}
          Schlafzimmer
        {% elif is_state('sensor.mqtt_room_galaxys8', 'lower_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_galaxys8', 'lowe_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_galaxys8', 'upper_bathroom') %}
          Bad oben
        {% elif is_state('sensor.mqtt_room_galaxys8', 'upper_balcony') %}
          Balkon Oben
        {% elif is_state('sensor.mqtt_room_galaxys8', 'guest_room') %}
          Gästezimmer
        {% else %}
          Unbekannt
        {% endif %}
      entity_id:
       - sensor.mqtt_room_galaxys8
- platform: template
  sensors:
    location_user_one:
      friendly_name: Kevin
      value_template: >-
        {% if states.device_tracker.kevin.state != 'home' and states.device_tracker.kevin.state == 'not_home' %}
          Unterwegs
        {% elif states.device_tracker.kevin.state != 'home' and states.device_tracker.kevin.state != 'not_home' %}
          {{states.device_tracker.kevin.state}}
        {% else %}
          {{states.sensor.room_user_one.state}}
        {% endif %}
      entity_id:
       - sensor.room_user_one
       - device_tracker.kevin
    location_user_two:
      friendly_name: Sina
      value_template: >-
        {% if states.device_tracker.sina.state != 'home' and states.device_tracker.sina.state == 'not_home' %}
          Unterwegs
        {% elif states.device_tracker.sina.state != 'home' and states.device_tracker.sina.state != 'not_home' %}
          {{states.device_tracker.sina.state}}
        {% else %}
          {{states.sensor.room_user_two.state}}
        {% endif %}
      entity_id:
       - sensor.room_user_two
       - device_tracker.sina
    location_s8plus:
      friendly_name: S8Plus
      value_template: >-
        {% if states.device_tracker.galaxys8.state != 'home' and states.device_tracker.galaxys8.state == 'not_home' %}
          Unterwegs
        {% elif states.device_tracker.galaxys8.state != 'home' and states.device_tracker.galaxys8.state != 'not_home' %}
          {{states.device_tracker.galaxys8.state}}
        {% else %}
          {{states.sensor.room_s8plus.state}}
        {% endif %}
      entity_id:
       - sensor.room_s8plus
       - device_tracker.galaxys8
#################################################################
## Sonoff
#################################################################
- platform: mqtt
  state_topic: "tele/sonoff_small_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Temperature }}"
  name: 'Small Lamp Temperature'
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "tele/sonoff_small_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Humidity }}"
  name: 'Small Lamp Humidity'
  unit_of_measurement: '%'
- platform: mqtt
  state_topic: "tele/sonoff_large_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Temperature }}"
  name: 'Large Lamp Temperature'
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "tele/sonoff_large_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Humidity }}"
  name: 'Large Lamp Humidity'
  unit_of_measurement: '%'
- platform: mqtt
  state_topic: "tele/sonoff_ventilator/SENSOR"
  value_template: "{{ value_json['AM2301'].Temperature }}"
  name: 'Ventilator Temperature'
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "tele/sonoff_ventilator/SENSOR"
  value_template: "{{ value_json['AM2301'].Humidity }}"
  name: 'Ventilator Humidity'
  unit_of_measurement: '%'
- platform: mqtt
  state_topic: "tele/sonoff_large_ventilator/SENSOR"
  value_template: "{{ value_json['AM2301'].Temperature }}"
  name: 'Large Ventilator Temperature'
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "tele/sonoff_large_ventilator/SENSOR"
  value_template: "{{ value_json['AM2301'].Humidity }}"
  name: 'Large Ventilator Humidity'
  unit_of_measurement: '%'
- platform: mqtt
  name: "teckin_power_usage"
  friendly_name: "Schlafzimmerreceiver Verbrauch"
  icon: mdi:speaker
  state_topic: "tele/sonoff_teckin/SENSOR"
  value_template: "{{ value_json['ENERGY'].Power }}"
  unit_of_measurement: "W"
  availability_topic: "tele/sonoff_teckin/LWT"
  qos: 2
  payload_available: "Online"
  payload_not_available: "Offline"
- platform: mqtt
  name: "teckin_power_usage_today"
  friendly_name: "Schlafzimmerreceiver Heute"
  icon: mdi:speaker
  state_topic: "tele/sonoff_teckin/SENSOR"
  value_template: "{{ value_json['ENERGY'].Today }}"
  unit_of_measurement: "kWh"
  availability_topic: "tele/sonoff_teckin/LWT"
  qos: 2
  payload_available: "Online"
  payload_not_available: "Offline"
- platform: mqtt
  name: "teckin_power_usage_total"
  friendly_name: "Schlafzimmerreceiver Total"
  icon: mdi:speaker
  state_topic: "tele/sonoff_teckin/SENSOR"
  value_template: "{{ value_json['ENERGY'].Total }}"
  unit_of_measurement: "kWh"
  availability_topic: "tele/sonoff_teckin/LWT"
  qos: 2
  payload_available: "Online"
  payload_not_available: "Offline"
#################################################################
## Travel Times
#################################################################
#Waze realtime
#Work from Home
- platform: waze_travel_time
  name: travel_time_work_from_home_waze_realtime
  region: 'EU'
  origin: zone.home
  destination: zone.work
  realtime: false
#Home from Work
- platform: waze_travel_time
  name: travel_time_home_from_work_waze_realtime
  region: 'EU'
  origin: zone.work
  destination: zone.home
  realtime: false
#Elmo from Home
- platform: waze_travel_time
  name: travel_time_elmo_from_home_waze_realtime
  region: 'EU'
  origin: zone.home
  destination: zone.elmo
  realtime: false
#Waze standard
#Work from Home
- platform: waze_travel_time
  name: travel_time_work_from_home_waze
  region: 'EU'
  origin: zone.home
  destination: zone.work
#Home from Work
- platform: waze_travel_time
  name: travel_time_home_from_work_waze
  region: 'EU'
  origin: zone.work
  destination: zone.home
#Elmo from Home
- platform: waze_travel_time
  name: travel_time_elmo_from_home_waze
  region: 'EU'
  origin: zone.home
  destination: zone.elmo
#Google
#Next Appointment Car
- platform: google_travel_time
  name: travel_time_next_appointment_location_car
  api_key: !secret google_maps_api_token
  origin: !secret device_user_one
  destination: sensor.cal_next_appointment_location_google_prepared
  options:
    arrival_time: sensor.cal_next_appointment_start_time
#Next Appointment Car User Two
- platform: google_travel_time
  name: travel_time_next_appointment_location_car_user_two
  api_key: !secret google_maps_api_token
  origin: !secret device_user_two
  destination: sensor.cal_next_appointment_location_google_prepared_user_two
  options:
    arrival_time: sensor.cal_next_appointment_start_time_user_two
# Travel Time Home User One
- platform: google_travel_time
  name: travel_time_home_user_one
  api_key: !secret google_maps_api_token
  origin: !secret device_user_one
  destination: zone.home
  scan_interval: 2678400 # 1 month
# Travel Time Home User Two
- platform: google_travel_time
  name: travel_time_home_user_two
  api_key: !secret google_maps_api_token_user_two
  origin: !secret device_user_two
  destination: zone.home
  scan_interval: 2678400 # 1 month
#################################################################
## Next Appointment
#################################################################
#User One
- platform: template
  sensors:
    cal_next_appointment_title:
      friendly_name: Termin
      value_template: "{{ states.calendar.keifingergooglemailcom.attributes.message }}"
      entity_id:
       - calendar.keifingergooglemailcom
    cal_next_appointment_location:
      friendly_name: Ort
      value_template: "{{ states.calendar.keifingergooglemailcom.attributes.location }}"
      entity_id:
       - calendar.keifingergooglemailcom
    cal_next_appointment_location_google_prepared:
       value_template: '{% if is_state("sensor.cal_next_appointment_location","None") %}{{ "47.641223,68.803727"}}{% else %}{{ states.calendar.keifingergooglemailcom.attributes.location }}{% endif %}'
       friendly_name: Ort
       entity_id:
       - calendar.keifingergooglemailcom
       - sensor.cal_next_appointment_location
    cal_next_appointment_start_time:
      friendly_name: Um
      value_template: "{{ states.calendar.keifingergooglemailcom.attributes.start_time or now() }}"
      entity_id:
       - calendar.keifingergooglemailcom
    calc_leave_time:
       value_template: '{% if is_state("input_select.next_appointment_travel_mode","Auto") %}{{(as_timestamp(states.calendar.keifingergooglemailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_car") | int *60  - (states("input_number.leave_time_offset") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% elif is_state("input_select.next_appointment_travel_mode","Fahrrad")%} {{(as_timestamp(states.calendar.keifingergooglemailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_bike") | int *60  - (states("input_number.leave_time_offset") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% elif is_state("input_select.next_appointment_travel_mode","Öffis")%} {{(as_timestamp(states.calendar.keifingergooglemailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_transit") | int *60  - (states("input_number.leave_time_offset") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% elif is_state("input_select.next_appointment_travel_mode","Laufen")%} {{(as_timestamp(states.calendar.keifingergooglemailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_walking") | int *60  - (states("input_number.leave_time_offset") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% endif %}'
       friendly_name: Losfahren
       entity_id:
       - input_select.next_appointment_travel_mode
       - calendar.keifingergooglemailcom
       - input_number.leave_time_offset
       - sensor.travel_time_next_appointment_location_car
       - sensor.travel_time_next_appointment_location_transit
       - sensor.travel_time_next_appointment_location_bike
    travel_time_next_appointment_location:
      friendly_name: Dauer
      unit_of_measurement: min
      value_template: '{% if is_state("input_select.next_appointment_travel_mode","Auto") %}{{states("sensor.travel_time_next_appointment_location_car")}} {% elif is_state("input_select.next_appointment_travel_mode","Fahrrad")%} {{states("sensor.travel_time_next_appointment_location_bike")}} {% elif is_state("input_select.next_appointment_travel_mode","Öffis")%} {{ states("sensor.travel_time_next_appointment_location_transit")}} {% elif is_state("input_select.next_appointment_travel_mode","Laufen")%} {{ states("sensor.travel_time_next_appointment_location_walking")}} {% endif %}'
      entity_id:
       - input_select.next_appointment_travel_mode
       - sensor.travel_time_next_appointment_location_car
       - sensor.travel_time_next_appointment_location_transit
       - sensor.travel_time_next_appointment_location_bike
#User Two
- platform: template
  sensors:
    cal_next_appointment_title_user_two:
      friendly_name: Termin
      value_template: "{{ states.calendar.stillhammersinagmailcom.attributes.message }}"
      entity_id:
       - calendar.stillhammersinagmailcom
    cal_next_appointment_location_user_two:
      friendly_name: Ort
      value_template: "{{ states.calendar.stillhammersinagmailcom.attributes.location }}"
      entity_id:
       - calendar.stillhammersinagmailcom
    cal_next_appointment_location_google_prepared_user_two:
       value_template: '{% if is_state("sensor.cal_next_appointment_location_user_two","None") %}{{ "47.641223,68.803727"}}{% else %}{{ states.calendar.stillhammersinagmailcom.attributes.location }}{% endif %}'
       friendly_name: Ort
       entity_id:
       - sensor.cal_next_appointment_location_user_two
       - calendar.stillhammersinagmailcom
    cal_next_appointment_start_time_user_two:
      friendly_name: Um
      value_template: "{{ states.calendar.stillhammersinagmailcom.attributes.start_time or now() }}"
      entity_id:
       - calendar.stillhammersinagmailcom
    calc_leave_time_user_two:
       value_template: '{% if is_state("input_select.next_appointment_travel_mode_user_two","Auto") %}{{(as_timestamp(states.calendar.stillhammersinagmailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_car_user_two") | int *60  - (states("input_number.leave_time_offset_user_two") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% elif is_state("input_select.next_appointment_travel_mode_user_two","Fahrrad")%} {{(as_timestamp(states.calendar.stillhammersinagmailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_bike_user_two") | int *60  - (states("input_number.leave_time_offset_user_two") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% elif is_state("input_select.next_appointment_travel_mode_user_two","Öffis")%} {{(as_timestamp(states.calendar.stillhammersinagmailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_transit_user_two") | int *60  - (states("input_number.leave_time_offset_user_two") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% elif is_state("input_select.next_appointment_travel_mode_user_two","Laufen")%} {{(as_timestamp(states.calendar.stillhammersinagmailcom.attributes.start_time or now()) - states("sensor.travel_time_next_appointment_location_walking_user_two") | int *60  - (states("input_number.leave_time_offset_user_two") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} {% endif %}'
       friendly_name: Losfahren
       entity_id:
       - input_select.next_appointment_travel_mode_user_two
       - calendar.stillhammersinagmailcom
       - input_number.leave_time_offset_user_two
       - sensor.travel_time_next_appointment_location_car_user_two
       - sensor.travel_time_next_appointment_location_transit_user_two
       - sensor.travel_time_next_appointment_location_bike_user_two
    travel_time_next_appointment_location_user_two:
      friendly_name: Dauer
      unit_of_measurement: min
      value_template: '{% if is_state("input_select.next_appointment_travel_mode_user_two","Auto") %}{{states("sensor.travel_time_next_appointment_location_car_user_two")}} {% elif is_state("input_select.next_appointment_travel_mode_user_two","Fahrrad")%} {{states("sensor.travel_time_next_appointment_location_bike_user_two")}} {% elif is_state("input_select.next_appointment_travel_mode_user_two","Öffis")%} {{ states("sensor.travel_time_next_appointment_location_transit_user_two")}} {% elif is_state("input_select.next_appointment_travel_mode_user_two","Laufen")%} {{ states("sensor.travel_time_next_appointment_location_walking_user_two")}} {% endif %}'
      entity_id:
       - input_select.next_appointment_travel_mode_user_two
       - sensor.travel_time_next_appointment_location_car_user_two
       - sensor.travel_time_next_appointment_location_transit_user_two
       - sensor.travel_time_next_appointment_location_bike_user_two
#################################################################
## Sun
#################################################################
- platform: template
  sensors:
    sunset_time:
      value_template: "{{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom('%H:%M') }}"
      friendly_name: Sonnenuntergang
      entity_id:
       - sun.sun
    sunrise_time:
      value_template: "{{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom('%H:%M') }}"
      friendly_name: Sonnenaufgang
      entity_id:
       - sun.sun
    solar_angle:
      value_template: "{{ states.sun.sun.attributes.elevation }}"
      friendly_name: Solar Angle
      unit_of_measurement: degrees
      entity_id:
       - sun.sun
#################################################################
## Face Detection
#################################################################
- platform: template
  sensors:
    facebox_detection:
      friendly_name: 'Erkanntes Gesicht'
      value_template: '{% if states.image_processing.facebox.attributes.faces | length > 0 %}{{ states.image_processing.facebox.attributes.faces[0]["name"]}}{% else %}Kein Gesicht{% endif %}'
#################################################################
## Power Usage
#################################################################
- platform: template
  sensors:
    tplink_tv_power_usage:
      friendly_name: Fernseher Verbrauch
      unit_of_measurement: 'W'
      value_template: "{{states.switch.tplink_tv.attributes.current_power_w}}"
      entity_id:
       - switch.tplink_tv
    tplink_tv_power_usage_total:
      friendly_name: Fernseher Total
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.tplink_tv.attributes.total_energy_kwh}}"
      entity_id:
       - switch.tplink_tv
    tplink_tv_power_usage_today:
      friendly_name: Fernseher Heute
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.tplink_tv.attributes.today_energy_kwh}}"
      entity_id:
       - switch.tplink_tv
    washingmachine_power_usage:
      friendly_name: Waschmaschine
      unit_of_measurement: 'W'
      value_template: "{{states.switch.washingmachine.attributes.current_power_w}}"
      entity_id:
       - switch.washingmachine
    washingmachine_power_usage_total:
      friendly_name: Waschmaschine Total
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.washingmachine.attributes.total_energy_kwh}}"
      entity_id:
       - switch.washingmachine
    washingmachine_power_usage_today:
      friendly_name: Waschmaschine Heute
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.washingmachine.attributes.today_energy_kwh}}"
      entity_id:
       - switch.washingmachine
    dishwasher_power_usage:
      friendly_name: Spülmaschine
      unit_of_measurement: 'W'
      value_template: "{{states.switch.dishwasher.attributes.current_power_w}}"
      entity_id:
       - switch.washingmachine
    dishwasher_power_usage_total:
      friendly_name: Spülmaschine Total
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.dishwasher.attributes.total_energy_kwh}}"
      entity_id:
       - switch.washingmachine
    dishwasher_power_usage_today:
      friendly_name: Spülmaschine Heute
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.dishwasher.attributes.today_energy_kwh}}"
      entity_id:
       - switch.washingmachine
#################################################################
## Gas Stations
#################################################################
- platform: rest
  name: Fuel
  scan_interval: 900    
  resource: !secret tankerkoenig_url
  value_template: '{ value_json.prices.[] }'
  json_attributes:
    - prices
- platform: template
  sensors:
    gas_station_star:
      friendly_name: 'STAR Tankstelle'
      value_template: '{{ states.sensor.fuel.attributes["prices"]["005056ba-7cb6-1ed2-bceb-6b90ef1a8d20"]["diesel"]}}'
      unit_of_measurement: '€'
      entity_id:
       - sensor.fuel
    gas_station_metro:
      friendly_name: 'METRO Tankstelle'
      value_template: '{{ states.sensor.fuel.attributes["prices"]["51d4b62c-a095-1aa0-e100-80009459e03a"]["diesel"]}}'
      unit_of_measurement: '€'
      entity_id:
       - sensor.fuel
    gas_station_globus: 
      friendly_name: 'GLOBUS SVA Tankstelle'
      value_template: '{{ states.sensor.fuel.attributes["prices"]["51d4b634-a095-1aa0-e100-80009459e03a"]["diesel"]}}'
      unit_of_measurement: '€'
      entity_id:
       - sensor.fuel
- platform: statistics
  entity_id: sensor.gas_station_star
  name: statistics_gas_station_star
  sampling_size: 900 #Roughly 30 days
- platform: statistics
  entity_id: sensor.gas_station_metro
  name: statistics_gas_station_metro
  sampling_size: 900 #Roughly 30 days
- platform: statistics
  entity_id: sensor.gas_station_globus
  name: statistics_gas_station_globus
  sampling_size: 900 #Roughly 30 days
#################################################################
## DWD Pollen
#################################################################
- platform: rest
  scan_interval: 43200   
  resource: https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json
  name: pollen_101_graeser # Rhein, Pfalz, Nahe und Mosel
  value_template: '{% for region in value_json.content -%}{%- if region.partregion_id == 101 %}{{region.Pollen.Graeser}}{% endif -%}{%- endfor %}'
  json_attributes:
    - next_update
- platform: rest
  scan_interval: 43200 
  resource: https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json
  name: pollen_101_birke # Rhein, Pfalz, Nahe und Mosel
  value_template: '{% for region in value_json.content -%}{%- if region.partregion_id == 101 %}{{region.Pollen.Birke}}{% endif -%}{%- endfor %}'
  json_attributes:
    - next_update
- platform: rest
  scan_interval: 43200  
  resource: https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json
  name: pollen_101_roggen # Rhein, Pfalz, Nahe und Mosel
  value_template: '{% for region in value_json.content -%}{%- if region.partregion_id == 101 %}{{region.Pollen.Roggen}}{% endif -%}{%- endfor %}'
  json_attributes:
    - next_update
- platform: template
  sensors:
    pollen_101_graeser_today:
      friendly_name: 'Gräser Heute'
      value_template: >
        {{ states('sensor.pollen_101_graeser')
             |regex_findall_index("'today': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_graeser
    pollen_101_graeser_tomorrow:
      friendly_name: 'Gräser Morgen'
      value_template: >
        {{ states('sensor.pollen_101_graeser')
             |regex_findall_index("'tomorrow': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_graeser
    pollen_101_graeser_dayaftertomorrow:
      friendly_name: 'Gräser Übermorgen'
      value_template: >
        {{ states('sensor.pollen_101_graeser')
             |regex_findall_index("'dayafter_to': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_graeser
    pollen_101_birke_today:
      friendly_name: 'Birke Heute'
      value_template: >
        {{ states('sensor.pollen_101_birke')
             |regex_findall_index("'today': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_birke
    pollen_101_birke_tomorrow:
      friendly_name: 'Birke Morgen'
      value_template: >
        {{ states('sensor.pollen_101_birke')
             |regex_findall_index("'tomorrow': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_birke
    pollen_101_birke_dayaftertomorrow:
      friendly_name: 'Birke Übermorgen'
      value_template: >
        {{ states('sensor.pollen_101_birke')
             |regex_findall_index("'dayafter_to': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_birke
    pollen_101_roggen_today:
      friendly_name: 'Roggen Heute'
      value_template: >
        {{ states('sensor.pollen_101_roggen')
             |regex_findall_index("'today': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_roggen
    pollen_101_roggen_tomorrow:
      friendly_name: 'Roggen Morgen'
      value_template: >
        {{ states('sensor.pollen_101_roggen')
             |regex_findall_index("'tomorrow': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_roggen
    pollen_101_roggen_dayaftertomorrow:
      friendly_name: 'Roggen Übermorgen'
      value_template: >
        {{ states('sensor.pollen_101_roggen')
             |regex_findall_index("'dayafter_to': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
      entity_id:
       - sensor.pollen_101_roggen
#################################################################
## Uptime
#################################################################
- platform: uptime
  name: Uptime
  unit_of_measurement: minutes
#################################################################
## Current Commit
#################################################################
- platform: command_line
  name: current_commit
  command: cat /config/currentCommit.txt
- platform: template
  sensors:
    current_commit_id:
      friendly_name: Id
      value_template: "{{states.sensor.current_commit.state.split(' ',1)[0]}}"
      entity_id:
       - sensor.current_commit
    current_commit_name:
      friendly_name: Message
      value_template: "{{states.sensor.current_commit.state.split(' ',1)[1]}}"
      entity_id:
       - sensor.current_commit
#################################################################
## Alarm Clock
#################################################################
- platform: template
  sensors:
    alarm_time:
      friendly_name: 'Uhrzeit'
      # If both are home we use the timer that is earliest. Else we use the timer of the person who is home
      value_template: '{%if states.device_tracker.sina.state == "home" and states.device_tracker.kevin.state == "home" %}{% if as_timestamp(states.sensor.alarm_kevin.state or "2100-12-29 09:25:00") < as_timestamp(states.sensor.alarm_sina.state or "2100-12-29 09:25:00" %}{{states.sensor.alarm_kevin.state}}{% else %}{{states.sensor.alarm_sina.state}}{% endif %}{% elif states.device_tracker.sina.state == "home" %}{{states.sensor.alarm_sina.state}}{% elif states.device_tracker.kevin.state == "home" %}{{states.sensor.alarm_kevin.state}}{% endif %}'
      entity_id:
       - device_tracker.sina
       - device_tracker.kevin
       - sensor.alarm_kevin
       - sensor.alarm_sina
#################################################################
## Broadlink
#################################################################
- platform: broadlink
  update_interval: 60
  host: !secret rm_pro_plus_ip
  mac: !secret rm_pro_plus_mac
  monitored_conditions:
    - temperature
#################################################################
## RMV
#################################################################
- platform: rmvtransport
  next_departure:
    - station: 3025386
      name: Ruthof
      time_offset: 5
      products:
        - 'RB'
        - 'RE'
        - 'Bus'
        - 'S'
    - station: 3025386
      name: Nach Brückenkopf
      destinations: ['Wiesbaden-Mainz-Kastel Brückenkopf']
- platform: template
  sensors:
    nach_bruckenkopf_0:
      value_template: 'Linie {{states.sensor.nach_bruckenkopf.attributes["next_departures"][0]["line"]}} Richtung {{states.sensor.nach_bruckenkopf.attributes["next_departures"][0]["direction"] }} in {{states.sensor.nach_bruckenkopf.attributes["next_departures"][0]["minutes"]}} Minuten'
      entity_id:
       - sensor.nach_bruckenkopf
    nach_bruckenkopf_1:
      value_template: 'Linie {{states.sensor.nach_bruckenkopf.attributes["next_departures"][1]["line"]}} Richtung {{states.sensor.nach_bruckenkopf.attributes["next_departures"][1]["direction"] }} in {{states.sensor.nach_bruckenkopf.attributes["next_departures"][1]["minutes"]}} Minuten'
      entity_id:
       - sensor.nach_bruckenkopf
    nach_bruckenkopf_2:
      value_template: 'Linie {{states.sensor.nach_bruckenkopf.attributes["next_departures"][2]["line"]}} Richtung {{states.sensor.nach_bruckenkopf.attributes["next_departures"][2]["direction"] }} in {{states.sensor.nach_bruckenkopf.attributes["next_departures"][2]["minutes"]}} Minuten'
      entity_id:
       - sensor.nach_bruckenkopf
    nach_bruckenkopf_3:
      value_template: 'Linie {{states.sensor.nach_bruckenkopf.attributes["next_departures"][3]["line"]}} Richtung {{states.sensor.nach_bruckenkopf.attributes["next_departures"][3]["direction"] }} in {{states.sensor.nach_bruckenkopf.attributes["next_departures"][3]["minutes"]}} Minuten'
      entity_id:
       - sensor.nach_bruckenkopf
    nach_bruckenkopf_4:
      value_template: 'Linie {{states.sensor.nach_bruckenkopf.attributes["next_departures"][4]["line"]}} Richtung {{states.sensor.nach_bruckenkopf.attributes["next_departures"][4]["direction"] }} in {{states.sensor.nach_bruckenkopf.attributes["next_departures"][4]["minutes"]}} Minuten'
      entity_id:
       - sensor.nach_bruckenkopf
#################################################################
## Valetudo / Xiaomi Vacuum
#################################################################
- platform: rest
  resource: !secret valetudo_url #http://192.168.x.x/api/remote/map
  name: snowie_map
  value_template: '{{ value_json.mapsrc }}'