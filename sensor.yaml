#################################################################
## Darksky
#################################################################
- platform: darksky
  api_key: !secret darsky_api_key
  monitored_conditions:
    - summary
    - icon
    - nearest_storm_distance
    - precip_type
    - precip_intensity
    - precip_probability
    - temperature
    - wind_speed
    - cloud_cover
    - humidity
    - pressure
    - temperature_max
    - temperature_min
#################################################################
## Room Presence
#################################################################
#########User one
- platform: mqtt
  name: mqtt_room_user_one
  state_topic: !secret room_user_one_state_topic
  value_template: '{{ value_json.guesses[0].location }}'
#Rename sensor in frontend
- platform: template
  sensors:
    room_user_one:
      friendly_name: !secret user_one_name
      value_template: >-
        {% if is_state('sensor.mqtt_room_user_one', 'livingroom') %}
          Wohnzimmer
        {% elif is_state('sensor.mqtt_room_user_one', 'kitchen') %}
          Küche
        {% elif is_state('sensor.mqtt_room_user_one', 'studyroom') %}
          Arbeitszimmer
        {% elif is_state('sensor.mqtt_room_user_one', 'bedroom') %}
          Schlafzimmer
        {% elif is_state('sensor.mqtt_room_user_one', 'lower_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_one', 'lowe_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_one', 'upper_bathroom') %}
          Bad oben
        {% elif is_state('sensor.mqtt_room_user_one', 'upper_balcony') %}
          Balkon Oben
        {% elif is_state('sensor.mqtt_room_user_one', 'guest_room') %}
          Gästezimmer
        {% else %}
          Unbekannt
        {% endif %}
#########User two
- platform: mqtt
  name: mqtt_room_user_two
  state_topic: !secret room_user_two_state_topic
  value_template: '{{ value_json.guesses[0].location }}'
#Rename sensor in frontend
- platform: template
  sensors:
    room_user_two:
      friendly_name: !secret user_two_name
      value_template: >-
        {% if is_state('sensor.mqtt_room_user_two', 'livingroom') %}
          Wohnzimmer
        {% elif is_state('sensor.mqtt_room_user_two', 'kitchen') %}
          Küche
        {% elif is_state('sensor.mqtt_room_user_two', 'studyroom') %}
          Arbeitszimmer
        {% elif is_state('sensor.mqtt_room_user_two', 'bedroom') %}
          Schlafzimmer
        {% elif is_state('sensor.mqtt_room_user_two', 'lower_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_two', 'lowe_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_user_two', 'upper_bathroom') %}
          Bad oben
        {% elif is_state('sensor.mqtt_room_user_two', 'upper_balcony') %}
          Balkon Oben
        {% elif is_state('sensor.mqtt_room_user_two', 'guest_room') %}
          Gästezimmer
        {% else %}
          Unbekannt
        {% endif %}
#########S8Plus
- platform: mqtt
  name: mqtt_room_galaxys8
  state_topic: eifinger/location/galaxys8
  value_template: '{{ value_json.guesses[0].location }}'
#Rename sensor in frontend
- platform: template
  sensors:
    room_s8plus:
      friendly_name: S8-Plus
      value_template: >-
        {% if is_state('sensor.mqtt_room_galaxys8', 'livingroom') %}
          Wohnzimmer
        {% elif is_state('sensor.mqtt_room_galaxys8', 'kitchen') %}
          Küche
        {% elif is_state('sensor.mqtt_room_galaxys8', 'studyroom') %}
          Arbeitszimmer
        {% elif is_state('sensor.mqtt_room_galaxys8', 'bedroom') %}
          Schlafzimmer
        {% elif is_state('sensor.mqtt_room_galaxys8', 'lower_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_galaxys8', 'lowe_bathroom') %}
          Bad unten
        {% elif is_state('sensor.mqtt_room_galaxys8', 'upper_bathroom') %}
          Bad oben
        {% elif is_state('sensor.mqtt_room_galaxys8', 'upper_balcony') %}
          Balkon Oben
        {% elif is_state('sensor.mqtt_room_galaxys8', 'guest_room') %}
          Gästezimmer
        {% else %}
          Unbekannt
        {% endif %}
- platform: template
  sensors:
    location_user_one:
      friendly_name: Kevin
      value_template: "{%- if states.device_tracker.kevin.state != 'home' %}{{states.device_tracker.kevin.state}}{% else %}{{states.sensor.room_user_one.state}}{% endif -%}"
    location_user_two:
      friendly_name: Sina
      value_template: "{%- if states.device_tracker.sina.state != 'home' %}{{states.device_tracker.sina.state}}{% else %}{{states.sensor.room_user_two.state}}{% endif -%}"
    location_s8plus:
      friendly_name: S8Plus
      value_template: "{%- if states.device_tracker.kevin.state != 'home' %}{{states.device_tracker.galaxys8.state}}{% else %}{{states.sensor.room_s8plus.state}}{% endif -%}"
#################################################################
## Sonoff
#################################################################
- platform: mqtt
  state_topic: "tele/sonoff_small_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Temperature }}"
  name: 'Small Lamp Temperature'
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "tele/sonoff_small_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Humidity }}"
  name: 'Small Lamp Humidity'
  unit_of_measurement: '%'
- platform: mqtt
  state_topic: "tele/sonoff_large_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Temperature }}"
  name: 'Large Lamp Temperature'
  unit_of_measurement: '°C'
- platform: mqtt
  state_topic: "tele/sonoff_large_lamp/SENSOR"
  value_template: "{{ value_json['AM2301'].Humidity }}"
  name: 'Large Lamp Humidity'
  unit_of_measurement: '%'
#################################################################
## Travel Times
#################################################################
#Google
#Work from Home
- platform: google_travel_time
  name: travel_time_work_from_home
  api_key: !secret google_maps_api_token
  origin: zone.home
  destination: zone.work
#Home from Work
- platform: google_travel_time
  name: travel_time_home_from_work
  api_key: !secret google_maps_api_token
  origin: zone.work
  destination: zone.home
#Elmo from Home
- platform: google_travel_time
  name: travel_time_elmo_from_home
  api_key: !secret google_maps_api_token
  origin: zone.home
  destination: zone.elmo
#Next Appointment Car
- platform: google_travel_time
  name: travel_time_next_appointment_location_car
  api_key: !secret google_maps_api_token
  origin: !secret device_user_one
  destination: sensor.cal_next_appointment_location_google_prepared
  options:
    arrival_time: sensor.cal_work_start_time
#Next Appointment Bike
- platform: google_travel_time
  name: travel_time_next_appointment_location_bike
  api_key: !secret google_maps_api_token
  origin: !secret device_user_one
  destination: sensor.cal_next_appointment_location_google_prepared
  options:
    arrival_time: sensor.cal_work_start_time
    mode: bicycling
#Next Appointment Transit
- platform: google_travel_time
  name: travel_time_next_appointment_location_transit
  api_key: !secret google_maps_api_token
  origin: !secret device_user_one
  destination: sensor.cal_next_appointment_location_google_prepared
  options:
    arrival_time: sensor.cal_work_start_time
    mode: transit
#compare with waze
- platform: google_travel_time
  name: travel_time_ikea_from_dom
  api_key: !secret google_maps_api_token
  origin: 49.999112, 8.273897
  destination: 50.058128, 8.371457

#Waze
- platform: waze_travel_time
  name: waze_travel_time_ikea_from_dom
  origin: 49.999112, 8.273897
  destination: 50.058128, 8.371457
  region: EU
#################################################################
## Next Appointment
#################################################################
- platform: template
  sensors:
    cal_next_appointment_title:
      friendly_name: Termin
      value_template: "{{ states.calendar.keifingergooglemailcom.attributes.message }}"
    cal_next_appointment_location:
      friendly_name: Ort
      value_template: "{{ states.calendar.keifingergooglemailcom.attributes.location }}"
    cal_next_appointment_location_google_prepared:
       value_template: '{% if is_state("sensor.cal_next_appointment_location","") %}{{ "47.641223,68.803727"}}{% else %}{{ states.calendar.keifingergooglemailcom.attributes.location }}{% endif %}' 
       friendly_name: Ort
    cal_next_appointment_start_time:
      friendly_name: Um
      value_template: "{{ states.calendar.keifingergooglemailcom.attributes.start_time }}"
    calc_leave_time:
       value_template: >
       {% if is_state("input_select.next_appointment_travel_mode","Auto") %}
         {{(as_timestamp(states.calendar.keifingergooglemailcom.attributes.start_time) - states("sensor.travel_time_next_appointment_location_car") | int *60  - (states("input_number.leave_time_offset") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}} 
       {% elif is_state("input_select.next_appointment_travel_mode","Fahrrad")%}
         {{(as_timestamp(states.calendar.keifingergooglemailcom.attributes.start_time) - states("sensor.travel_time_next_appointment_location_bike") | int *60  - (states("input_number.leave_time_offset") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}}
       {% elif is_state("input_select.next_appointment_travel_mode","Öffis")%}
         {{(as_timestamp(states.calendar.keifingergooglemailcom.attributes.start_time) - states("sensor.travel_time_next_appointment_location_transit") | int *60  - (states("input_number.leave_time_offset") | int * 60)) | timestamp_custom("%Y-%m-%d %H:%M")}}
       {% endif %}
       friendly_name: Losfahren
#################################################################
## Sun
#################################################################
- platform: template
  sensors:
    sunset_time:
      value_template: "{{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom('%H:%M') }}"
      friendly_name: Sonnenuntergang
    sunrise_time:
      value_template: "{{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom('%H:%M') }}"
      friendly_name: Sonnenaufgang
    solar_angle:
      value_template: "{{ states.sun.sun.attributes.elevation }}"
      friendly_name: Solar Angle
      unit_of_measurement: degrees
#################################################################
## Face Detection
#################################################################
- platform: template
  sensors:
    facebox_detection:
      friendly_name: 'Facebox Detection'
      value_template: '{{ states.image_processing.facebox_saved_images.attributes.faces[0]["name"].title}}'
#################################################################
## Power Usage
#################################################################
- platform: template
  sensors:
    ventilator_power_usage:
      friendly_name: Ventilator Verbrauch
      unit_of_measurement: 'W'
      value_template: "{{states.switch.ventilator.attributes.current_power_w}}"
    washingmachine_power_usage:
      friendly_name: Waschmaschinen Verbrauch
      unit_of_measurement: 'W'
      value_template: "{{states.switch.washingmachine.attributes.current_power_w}}"
    dishwasher_power_usage:
      friendly_name: Spülmaschinen Verbrauch
      unit_of_measurement: 'W'
      value_template: "{{states.switch.dishwasher.attributes.current_power_w}}"
    dishwasher_power_usage_total:
      friendly_name: Spülmaschinen Verbrauch Total
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.dishwasher.attributes.total_energy_kwh}}"
    dishwasher_power_usage_today:
      friendly_name: Spülmaschinen Verbrauch Heute
      unit_of_measurement: 'kWh'
      value_template: "{{states.switch.dishwasher.attributes.today_energy_kwh}}"
#################################################################
## Gas Stations
#################################################################
- platform: rest
  name: Fuel
  scan_interval: 900    
  resource: !secret tankerkoenig_url
  value_template: '{ value_json.prices.[] }'
  json_attributes:
    - prices
- platform: template
  sensors:
    gas_station_star:
      friendly_name: 'STAR Tankstelle'
      value_template: '{{ states.sensor.fuel.attributes["prices"]["005056ba-7cb6-1ed2-bceb-6b90ef1a8d20"]["diesel"]}}'
      unit_of_measurement: '€'
    gas_station_metro:
      friendly_name: 'METRO Tankstelle'
      value_template: '{{ states.sensor.fuel.attributes["prices"]["51d4b62c-a095-1aa0-e100-80009459e03a"]["diesel"]}}'
      unit_of_measurement: '€'
    gas_station_globus: 
      friendly_name: 'GLOBUS SVA Tankstelle'
      value_template: '{{ states.sensor.fuel.attributes["prices"]["51d4b634-a095-1aa0-e100-80009459e03a"]["diesel"]}}'
      unit_of_measurement: '€'
- platform: statistics
  entity_id: sensor.gas_station_star
  name: statistics_gas_station_star
  max_age:
    days: 7
- platform: statistics
  entity_id: sensor.gas_station_metro
  name: statistics_gas_station_metro
  max_age:
    days: 7
- platform: statistics
  entity_id: sensor.gas_station_globus
  name: statistics_gas_station_globus
  max_age:
    days: 7
#################################################################
## DWD Pollen
#################################################################
- platform: rest
  scan_interval: 43200   
  resource: https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json
  name: pollen_101_graeser # Rhein, Pfalz, Nahe und Mosel
  value_template: '{% for region in value_json.content -%}{%- if region.partregion_id == 101 %}{{region.Pollen.Graeser}}{% endif -%}{%- endfor %}'
- platform: rest
  scan_interval: 43200 
  resource: https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json
  name: pollen_101_birke # Rhein, Pfalz, Nahe und Mosel
  value_template: '{% for region in value_json.content -%}{%- if region.partregion_id == 101 %}{{region.Pollen.Birke}}{% endif -%}{%- endfor %}'
- platform: rest
  scan_interval: 43200  
  resource: https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json
  name: pollen_101_roggen # Rhein, Pfalz, Nahe und Mosel
  value_template: '{% for region in value_json.content -%}{%- if region.partregion_id == 101 %}{{region.Pollen.Roggen}}{% endif -%}{%- endfor %}'
- platform: template
  sensors:
    pollen_101_graeser_today:
      friendly_name: 'Gräser Heute'
      value_template: >
        {{ states('sensor.pollen_101_graeser')
             |regex_findall_index("'today': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_graeser_tomorrow:
      friendly_name: 'Gräser Morgen'
      value_template: >
        {{ states('sensor.pollen_101_graeser')
             |regex_findall_index("'tomorrow': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_graeser_dayaftertomorrow:
      friendly_name: 'Gräser Übermorgen'
      value_template: >
        {{ states('sensor.pollen_101_graeser')
             |regex_findall_index("'dayafter_to': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_birke_today:
      friendly_name: 'Birke Heute'
      value_template: >
        {{ states('sensor.pollen_101_birke')
             |regex_findall_index("'today': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_birke_tomorrow:
      friendly_name: 'Birke Morgen'
      value_template: >
        {{ states('sensor.pollen_101_birke')
             |regex_findall_index("'tomorrow': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_birke_dayaftertomorrow:
      friendly_name: 'Birke Übermorgen'
      value_template: >
        {{ states('sensor.pollen_101_birke')
             |regex_findall_index("'dayafter_to': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_roggen_today:
      friendly_name: 'Roggen Heute'
      value_template: >
        {{ states('sensor.pollen_101_roggen')
             |regex_findall_index("'today': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_roggen_tomorrow:
      friendly_name: 'Roggen Morgen'
      value_template: >
        {{ states('sensor.pollen_101_roggen')
             |regex_findall_index("'tomorrow': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
    pollen_101_roggen_dayaftertomorrow:
      friendly_name: 'Roggen Übermorgen'
      value_template: >
        {{ states('sensor.pollen_101_roggen')
             |regex_findall_index("'dayafter_to': '[-0-9]+'")
             |regex_findall_index("[-0-9]+") }}
#################################################################
## Uptime
#################################################################
- platform: uptime
  name: Uptime
  unit_of_measurement: minutes
#################################################################
## Current Commit
#################################################################
- platform: command_line
  name: current_commit
  command: cat /config/currentCommit.txt
- platform: template
  sensors:
    current_commit_id:
      friendly_name: Id
      value_template: "{{states.sensor.current_commit.state.split(' ',1)[0]}}"
    current_commit_name:
      friendly_name: Message
      value_template: "{{states.sensor.current_commit.state.split(' ',1)[1]}}"